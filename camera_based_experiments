{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# the purpose  of this script is \n",
    "# to see if the camera can capture the region required \n",
    "# To understand if the captured region is the chess board\n",
    "# to understand the box flags etc.\n",
    "\n",
    "import cv2\n",
    "import numpy as np\n",
    "\n",
    "# First get the capture to the camera\n",
    "cap = cv2.VideoCapture(0)\n",
    "while(cap.isOpened()):\n",
    "    ret, frame = cap.read()\n",
    "    cv2.imshow('chess_board', frame)\n",
    "    if cv2.waitKey(1) & 0xFF == ord(\"q\"):\n",
    "        break\n",
    "\n",
    "cap.release()\n",
    "cv2.destroyAllWindows()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Okay so now we have the feed coming in from the camera\n",
    "# Now gotta write the function to take only a portion of the frame that is in focus ( the chess board)\n",
    "import cv2\n",
    "\n",
    "class staticROI(object):\n",
    "    def __init__(self):\n",
    "        self.capture = cv2.VideoCapture('fedex.mp4')\n",
    "\n",
    "        # Bounding box reference points and boolean if we are extracting coordinates\n",
    "        self.image_coordinates = []\n",
    "        self.extract = False\n",
    "        self.selected_ROI = False\n",
    "        self.update()\n",
    "\n",
    "    def update(self):\n",
    "        while True:\n",
    "            if self.capture.isOpened():\n",
    "                # Read frame\n",
    "                (self.status, self.frame) = self.capture.read()\n",
    "                cv2.imshow('image', self.frame)\n",
    "                key = cv2.waitKey(2)\n",
    "\n",
    "                # Crop image\n",
    "                if key == ord('c'):\n",
    "                    self.clone = self.frame.copy()\n",
    "                    cv2.namedWindow('image')\n",
    "                    cv2.setMouseCallback('image', self.extract_coordinates)\n",
    "                    while True:\n",
    "                        key = cv2.waitKey(2)\n",
    "                        cv2.imshow('image', self.clone)\n",
    "\n",
    "                        # Crop and display cropped image\n",
    "                        if key == ord('c'):\n",
    "                            self.crop_ROI()\n",
    "                            self.show_cropped_ROI()\n",
    "\n",
    "                        # Resume video\n",
    "                        if key == ord('r'):\n",
    "                            break\n",
    "                # Close program with keyboard 'q'\n",
    "                if key == ord('q'):\n",
    "                    cv2.destroyAllWindows()\n",
    "                    exit(1)\n",
    "            else:\n",
    "                pass\n",
    "\n",
    "    def extract_coordinates(self, event, x, y, flags, parameters):\n",
    "        # Record starting (x,y) coordinates on left mouse button click\n",
    "        if event == cv2.EVENT_LBUTTONDOWN:\n",
    "            self.image_coordinates = [(x,y)]\n",
    "            self.extract = True\n",
    "\n",
    "        # Record ending (x,y) coordintes on left mouse bottom release\n",
    "        elif event == cv2.EVENT_LBUTTONUP:\n",
    "            self.image_coordinates.append((x,y))\n",
    "            self.extract = False\n",
    "\n",
    "            self.selected_ROI = True\n",
    "\n",
    "            # Draw rectangle around ROI\n",
    "            cv2.rectangle(self.clone, self.image_coordinates[0], self.image_coordinates[1], (0,255,0), 2)\n",
    "\n",
    "        # Clear drawing boxes on right mouse button click\n",
    "        elif event == cv2.EVENT_RBUTTONDOWN:\n",
    "            self.clone = self.frame.copy()\n",
    "            self.selected_ROI = False\n",
    "\n",
    "    def crop_ROI(self):\n",
    "        if self.selected_ROI:\n",
    "            self.cropped_image = self.frame.copy()\n",
    "\n",
    "            x1 = self.image_coordinates[0][0]\n",
    "            y1 = self.image_coordinates[0][1]\n",
    "            x2 = self.image_coordinates[1][0]\n",
    "            y2 = self.image_coordinates[1][1]\n",
    "\n",
    "            self.cropped_image = self.cropped_image[y1:y2, x1:x2]\n",
    "\n",
    "            print('Cropped image: {} {}'.format(self.image_coordinates[0], self.image_coordinates[1]))\n",
    "        else:\n",
    "            print('Select ROI to crop before cropping')\n",
    "\n",
    "    def show_cropped_ROI(self):\n",
    "        cv2.imshow('cropped image', self.cropped_image)\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    static_ROI = staticROI()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
